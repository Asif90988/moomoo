//! Core types and data structures for the trading system

use chrono::{DateTime, Utc};
use rust_decimal::Decimal;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use uuid::Uuid;

/// Unique identifier for trading agents
pub type AgentId = Uuid;

/// Unique identifier for trading orders
pub type OrderId = Uuid;

/// Unique identifier for trading positions
pub type PositionId = Uuid;

/// Trading symbol (e.g., "AAPL", "TSLA")
pub type Symbol = String;

/// Agent capabilities for self-modification and strategy generation
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Hash)]
pub enum AgentCapability {
    SelfModification,
    StrategyGeneration,
    RiskOptimization,
    InfrastructureManagement,
    EthicalReasoning,
    MarketAnalysis,
    ExecutionOptimization,
}

/// Types of autonomous agents in the system
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Hash)]
pub enum AgentType {
    MasterCoordinator,
    MarketIntelligence,
    RiskManagement,
    ExecutionEngine,
    LearningEngine,
    InfrastructureManager,
}

/// Market data structure for real-time processing
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MarketData {
    pub symbol: Symbol,
    pub timestamp: DateTime<Utc>,
    pub price: Decimal,
    pub volume: u64,
    pub bid: Option<Decimal>,
    pub ask: Option<Decimal>,
    pub bid_size: Option<u64>,
    pub ask_size: Option<u64>,
}

/// Trading order representation
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Order {
    pub id: OrderId,
    pub symbol: Symbol,
    pub order_type: OrderType,
    pub side: OrderSide,
    pub quantity: Decimal,
    pub price: Option<Decimal>,
    pub timestamp: DateTime<Utc>,
    pub status: OrderStatus,
}

/// Order types supported by the system
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum OrderType {
    Market,
    Limit,
    Stop,
    StopLimit,
}

/// Order side (buy/sell)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum OrderSide {
    Buy,
    Sell,
}

/// Order execution status
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum OrderStatus {
    Pending,
    PartiallyFilled,
    Filled,
    Cancelled,
    Rejected,
}

/// Trading position
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Position {
    pub id: PositionId,
    pub symbol: Symbol,
    pub quantity: Decimal,
    pub entry_price: Decimal,
    pub current_price: Decimal,
    pub unrealized_pnl: Decimal,
    pub realized_pnl: Decimal,
    pub timestamp: DateTime<Utc>,
}

/// Trading signal generated by AI models
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TradingSignal {
    pub symbol: Symbol,
    pub signal_type: SignalType,
    pub strength: f64, // 0.0 to 1.0
    pub confidence: f64, // 0.0 to 1.0
    pub timestamp: DateTime<Utc>,
    pub reasoning: String,
}

/// Types of trading signals
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SignalType {
    Buy,
    Sell,
    Hold,
    StrongBuy,
    StrongSell,
}

/// Portfolio state and metrics
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Portfolio {
    pub total_value: Decimal,
    pub cash_balance: Decimal,
    pub positions: HashMap<Symbol, Position>,
    pub daily_pnl: Decimal,
    pub total_pnl: Decimal,
    pub max_drawdown: Decimal,
    pub sharpe_ratio: Option<f64>,
    pub last_updated: DateTime<Utc>,
}

/// Risk metrics and limits
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RiskMetrics {
    pub var_95: Decimal, // Value at Risk (95% confidence)
    pub var_99: Decimal, // Value at Risk (99% confidence)
    pub expected_shortfall: Decimal,
    pub max_position_size: Decimal,
    pub daily_loss_limit: Decimal,
    pub portfolio_heat: f64, // 0.0 to 1.0
}

/// Market conditions and regime detection
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum MarketRegime {
    Bull,
    Bear,
    Sideways,
    HighVolatility,
    LowVolatility,
    Crisis,
}

/// System performance metrics
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PerformanceMetrics {
    pub total_trades: u64,
    pub winning_trades: u64,
    pub losing_trades: u64,
    pub win_rate: f64,
    pub average_win: Decimal,
    pub average_loss: Decimal,
    pub profit_factor: f64,
    pub max_consecutive_wins: u32,
    pub max_consecutive_losses: u32,
    pub average_execution_time_ms: f64,
}

/// Agent communication message
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AgentMessage {
    pub from: AgentId,
    pub to: AgentId,
    pub message_type: MessageType,
    pub payload: serde_json::Value,
    pub timestamp: DateTime<Utc>,
}

/// Types of messages between agents
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum MessageType {
    MarketUpdate,
    TradingSignal,
    RiskAlert,
    OrderExecution,
    PerformanceUpdate,
    SystemCommand,
    EmergencyShutdown,
}

/// System context for agent decision making
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SystemContext {
    pub market_regime: MarketRegime,
    pub portfolio: Portfolio,
    pub risk_metrics: RiskMetrics,
    pub performance_metrics: PerformanceMetrics,
    pub active_positions: u32,
    pub available_capital: Decimal,
    pub system_health: SystemHealth,
}

/// System health status
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SystemHealth {
    Healthy,
    Warning,
    Critical,
    Emergency,
}

/// Configuration for trading strategies
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StrategyConfig {
    pub name: String,
    pub enabled: bool,
    pub risk_limit: Decimal,
    pub max_position_size: Decimal,
    pub parameters: HashMap<String, serde_json::Value>,
}

/// Execution result for trades
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExecutionResult {
    pub order_id: OrderId,
    pub executed_quantity: Decimal,
    pub executed_price: Decimal,
    pub execution_time_ms: u64,
    pub slippage: Decimal,
    pub commission: Decimal,
    pub success: bool,
    pub error_message: Option<String>,
}
