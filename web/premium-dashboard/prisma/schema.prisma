// Neural Core Alpha-7 Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts with Neural Core protection
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  hashedPassword    String
  role              Role     @default(USER)
  isActive          Boolean  @default(true)
  emailVerified     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLogin         DateTime?

  // Neural Core Protection Settings
  maxDepositLimit   Float    @default(300.00)
  totalDeposited    Float    @default(0.00)
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  tradingAccounts   TradingAccount[]
  deposits          Deposit[]
  orders            Order[]
  aiInteractions    AIInteraction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Trading account management
model TradingAccount {
  id            String      @id @default(cuid())
  userId        String
  accountType   AccountType @default(PAPER)
  balance       Float       @default(0.00)
  buyingPower   Float       @default(0.00)
  totalValue    Float       @default(0.00)
  dayPnl        Float       @default(0.00)
  totalPnl      Float       @default(0.00)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  positions     Position[]
  orders        Order[]

  @@map("trading_accounts")
}

// Deposit tracking with Neural Core protection
model Deposit {
  id            String        @id @default(cuid())
  userId        String
  amount        Float
  status        DepositStatus @default(PENDING)
  paymentMethod String?
  transactionId String?       @unique
  processorRef  String?       // External payment processor reference
  createdAt     DateTime      @default(now())
  processedAt   DateTime?
  failedReason  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposits")
}

// Trading orders
model Order {
  id               String      @id @default(cuid())
  userId           String
  tradingAccountId String
  symbol           String
  side             OrderSide
  type             OrderType
  quantity         Float
  price            Float?
  stopPrice        Float?
  timeInForce      TimeInForce @default(GTC)
  status           OrderStatus @default(PENDING)
  filled           Float       @default(0.00)
  remaining        Float
  avgFillPrice     Float?
  commission       Float       @default(0.00)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  executedAt       DateTime?

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  executions     OrderExecution[]

  @@map("orders")
}

model OrderExecution {
  id          String   @id @default(cuid())
  orderId     String
  quantity    Float
  price       Float
  commission  Float    @default(0.00)
  executedAt  DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_executions")
}

// Portfolio positions
model Position {
  id               String   @id @default(cuid())
  tradingAccountId String
  symbol           String
  quantity         Float
  avgCost          Float
  marketValue      Float
  unrealizedPnl    Float
  realizedPnl      Float    @default(0.00)
  lastUpdate       DateTime @default(now())

  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)

  @@unique([tradingAccountId, symbol])
  @@map("positions")
}

// AI interaction logging for transparency
model AIInteraction {
  id             String          @id @default(cuid())
  userId         String
  interactionType AIInteractionType
  aiAgent        String         // Which AI agent (MarketIntelligence, RiskManager, etc.)
  thoughtType    String         // Analysis, Decision, Learning, etc.
  message        String         @db.Text
  confidence     Float
  reasoning      String[]       // Array of reasoning steps
  supportingData Json?          // Supporting metrics and data
  symbols        String[]       // Related symbols
  tags           String[]       // Categorization tags
  impactLevel    String         @default("Medium")
  educational    Boolean        @default(false)
  createdAt      DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

// Market data cache
model MarketData {
  id            String   @id
  symbol        String   @unique
  name          String
  price         Float
  change        Float
  changePercent Float
  volume        BigInt
  marketCap     BigInt?
  high24h       Float
  low24h        Float
  lastUpdate    DateTime @default(now())

  @@map("market_data")
}

// System configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum AccountType {
  PAPER
  LIVE
}

enum DepositStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
}

enum TimeInForce {
  GTC  // Good Till Cancelled
  IOC  // Immediate Or Cancel
  FOK  // Fill Or Kill
  DAY  // Day Order
}

enum OrderStatus {
  PENDING
  SUBMITTED
  PARTIAL_FILLED
  FILLED
  CANCELLED
  REJECTED
  EXPIRED
}

enum AIInteractionType {
  THOUGHT
  DECISION
  ANALYSIS
  LEARNING
  RISK_ASSESSMENT
  PATTERN_RECOGNITION
}